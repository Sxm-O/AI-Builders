import torch
import torch.nn as nn
from torchvision import models  # Add this import statement
from torchvision import transforms
from PIL import Image
import streamlit as st


#set title
st.markdown("<h1 style='text-align: center;'>üêç Snake Classification üêç </h1>", unsafe_allow_html=True)

#set header
st.markdown("<div style='text-align: left;'><br>Please upload a snake image</div>", unsafe_allow_html=True)



#load model
# Define class names  
class_names = ['‡∏á‡∏π‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° (Bungarus fasciatus)', '‡∏á‡∏π‡∏Å‡πâ‡∏ô‡∏Ç‡∏ö (Cylindrophis ruffus)', '‡∏á‡∏π‡∏à‡∏á‡∏≠‡∏≤‡∏á (Ophiophagus hannah)', '‡∏á‡∏π‡∏ó‡∏≤‡∏á‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß (Coelognathus radiatus)', '‡∏á‡∏π‡∏Å‡∏∞‡∏õ‡∏∞ (Calloselasma rhodostoma)', '‡∏á‡∏π‡πÄ‡∏´‡πà‡∏≤ (Cobra)', '‡∏á‡∏π‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏≤‡∏á‡πÑ‡∏´‡∏°‡πâ (Green pit viper)', '‡∏á‡∏π‡∏õ‡∏µ‡πà‡πÅ‡∏Å‡πâ‡∏ß‡∏•‡∏≤‡∏¢‡πÅ‡∏ï‡πâ‡∏° (Oligodon barroni)', '‡∏á‡∏π‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏õ‡∏≤‡∏Å‡∏à‡∏¥‡πâ‡∏á‡∏à‡∏Å (Oriental whip snake)', '‡∏á‡∏π‡∏•‡∏≤‡∏¢‡∏™‡∏≤‡∏ö‡∏Ñ‡∏≠‡πÅ‡∏î‡∏á (Red necked keelback)', '‡∏á‡∏π‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏° (Reticulated python)', "‡∏á‡∏π‡πÅ‡∏°‡∏ß‡πÄ‡∏ã‡∏≤ (Siamese Russell's Viper)", '‡∏á‡∏π‡πÅ‡∏™‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå (Sunbeam snake)']

# Define your model
model = models.resnet34(pretrained=True)
for param in model.parameters():
    param.requires_grad = True
model.fc = nn.Linear(in_features=512, out_features=13)

# Load the trained model's parameters
model.load_state_dict(torch.load('C:/Users/USER - 14350/Desktop/AI builders/my_model3-2.pth', map_location=torch.device('cpu')))
 
# Preprocess the image
transform = transforms.Compose([
    transforms.Resize((224, 224)),  # Resize to match model's input size
    transforms.ToTensor(),           # Convert PIL image to tensor
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # Normalize
])


# Define venomous snake species
venomous = ['‡∏á‡∏π‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° (Bungarus fasciatus)', '‡∏á‡∏π‡∏à‡∏á‡∏≠‡∏≤‡∏á (Ophiophagus hannah)', '‡∏á‡∏π‡∏Å‡∏∞‡∏õ‡∏∞ (Calloselasma rhodostoma)', '‡∏á‡∏π‡πÄ‡∏´‡πà‡∏≤ (Cobra)', "‡∏á‡∏π‡πÅ‡∏°‡∏ß‡πÄ‡∏ã‡∏≤ (Siamese Russell's Viper)",'‡∏á‡∏π‡∏•‡∏≤‡∏¢‡∏™‡∏≤‡∏ö‡∏Ñ‡∏≠‡πÅ‡∏î‡∏á (Red necked keelback)','‡∏á‡∏π‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏≤‡∏á‡πÑ‡∏´‡∏°‡πâ (Green pit viper)']

def classify_image(image):
    # Preprocess the image
    image = transform(image).unsqueeze(0)  # Add unsqueeze to add batch dimension
    
    # Use your model to predict the class
    model.eval()  # Set the model to evaluation mode
    with torch.no_grad():  # Disable gradient calculation
        outputs = model(image)
        _, predicted = torch.max(outputs, 1)
    
    # Calculate confidence
    confidence = torch.softmax(outputs, dim=1)[0] * 100
    
    # Get the predicted class label
    predicted_class_index = predicted.item()
    predicted_class_name = class_names[predicted_class_index] if predicted is not None else "Unknown"
    
    # Check if the predicted snake species is venomous
    if predicted_class_name in venomous:
        snake_venomous = "Venomous(‡∏°‡∏µ‡∏û‡∏¥‡∏©)"
    else:
        snake_venomous = "Non-Venomous(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏©)"
    
    # Return the predicted class label, confidence, and venomous status
    return predicted_class_name, confidence[predicted_class_index].item(), snake_venomous

#upload file
uploaded_image = st.file_uploader('', type=['jpeg', 'jpg', 'png'])

if uploaded_image is not None:
    image = Image.open(uploaded_image)
    st.image(image, caption='Uploaded Image', use_column_width=True)
    st.write("")
    st.write("Classifying...")

    # Perform classification
    predicted_class, confidence, venomous_status = classify_image(image)
    st.write(f"Prediction: {predicted_class}")
    st.write(f"Confidence: {confidence:.2f}%")
    st.write(f"Venomous Status: {venomous_status}")







